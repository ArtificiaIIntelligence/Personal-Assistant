import wit
import os
import json
from wit import Wit

'''
Initializate wit
'''
access_token = 'NUFTF6VJH6EC3BN5S2EK2STCPYGKPPNR'

def say(session_id, context, msg):
    print(msg)

def merge(session_id, context, entities, msg):
    return context

def error(session_id, context, e):
    print(str(e))

actions = {
    'say': say,
    'merge': merge,
    'error': error,
}
client = Wit(access_token, actions)
responses=[]

'''
Prepare testing sentences with expected responses
'''
sentences={
    'What is the weather in London?' : {'intent': 'weather','entities':{'location':'London'}},
    'What is the temperature outside?' : {'intent': 'weather','entities':{'location':'outside','weather_type':'temperature'}},
    'What moon phase will be on Wednesday?':{'intent': 'weather','entities':{'weather_type':'moonphase','datetime':None}},
    'What will be the weather during the weekend?':{'intent': 'weather','entities':{'datetime':None}},
    'How is the wind outside?':{'intent': 'weather','entities':{'location':'outside','weather_type':'windspeed'}},
    'Is it raining outside?':{'intent': 'weather','entities':{'location':'outside','weather_type':'rain'}},
    'Is it snowing in Brno?':{'intent': 'weather','entities':{'location':'Brno', 'weather_type':'snow'}},
    'Is it cloudy in Liberec?':{'intent': 'weather','entities':{'location':'Liberec','weather_type':'cloudy'}},
    'What is the weather forecast for the next week?':{'intent': 'weather','entities':{'datetime':None}},
    'Will the sun shine on Thursday?':{'intent': 'weather','entities':{'datetime':None}},
    'When will the sun rise on Monday?':{'intent': 'weather','entities':{'datetime':None,'weather_type':'sunrise'}},
    'Is there a storm coming?':{'intent': 'weather','entities':{'weather_type':'storm'}},
    'When does the sun set today?':{'intent': 'weather','entities':{'datetime':None,'weather_type':'sunrise'}},
    'Will it rain on Monday in New York?':{'intent': 'weather','entities':{'location':'New York','weather_type':'rain','datetime':None}},
    'What will be the temperature during weekend?' : {'intent': 'weather','entities':{'weather_type':'temperature','datetime':None}},
    'Will it be sunny on Thursday in Ostrava?' : {'intent': 'weather','entities':{'location':'Ostrava','datetime':None}},
    'Will there be a new moon on Tuesday?' : {'intent': 'weather','entities':{'weather_type':'newmoon','datetime':None}},
    'Tell me a joke' : {'intent': 'agenda','entities':{'weather_type':'agenda_entry'}},
    'How is the weather today?' : {'intent': 'weather','entities':{'datetime':None}},
    'Should I take an umbrella?' : {'intent': 'weather','entities':{'weather_type':'rain'}},
    'Is it cold outside?' : {'intent': 'weather','entities':{'location':'outside','weather_type':'temperature'}},
}

def testSentence(message,expOutcome):
    res={'intent':None,'entities':None,'confidence':None}
    resp = client.message(message)
    responses.append(resp)
    #print(str(resp['outcomes'][0]['intent']))
    print(str(resp['_text']))
    print(str(resp['outcomes'][0]['entities'].keys()))
    #print(str(resp['outcomes'][0]['confidence']))

    res['confidence'] = resp['outcomes'][0]['confidence']
    if expOutcome['intent'] == resp['outcomes'][0]['intent']:
        res['intent'] = 'Ok'
    else:
        res['intent'] = 'Bad'

    if expOutcome['entities'].keys() == resp['outcomes'][0]['entities'].keys():
        res['entities']='Ok'
        for key, value in expOutcome['entities'].items():

            if not(key=='datetime') and (not value == resp['outcomes'][0]['entities'][key][0]['value']):
                res['entities']='Bad'
    else:
        res['entities'] = 'Bad'

    return res

#Go through the test sentences and try them
for key, value in sentences.items():
    result=testSentence(key,value)

    if (result['intent'] == 'Ok') and (result['entities'] == 'Ok'):
        print('Ok')
    else:
        print('Mistake')

'''
Try the responses from wit in queryModule
'''

#Initializate the queryModules
currentDir=os.path.dirname(os.path.abspath(__file__))
desiredDir=os.path.join(currentDir,os.pardir,'modules','querylogic','modules')
moduleNames=os.listdir(desiredDir)
moduleNames=['modules.querylogic.modules.' + s for s in moduleNames]

moduleNames = [ name for name in moduleNames if not name.startswith('modules.querylogic.modules.__') ]
modules=[]
print(moduleNames)
for i in range(0,len(moduleNames)):
    moduleNames[i]=moduleNames[i][:-3]
    print(moduleNames[i])
    modules.append(__import__(moduleNames[i], fromlist=['']))

moduleInst=[]

for module in modules:
    initModule=module.init_hook()
    moduleInst.append(initModule)

params={'city':'Prague'}

#Feed the wit.ai responses into querymodule and print the answer

for wit in responses:
    for module in moduleInst:
        answer=module.query_resolution(wit['outcomes'][0]['intent'], wit['outcomes'][0], params)

        if(answer!='query not recognised'):
            print(answer)
